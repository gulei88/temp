/*
 * CZY__jd_updatecourselaboratory.java
 *
 * Created on __DATE__, __TIME__
 */

package czy.view;

import global.dao.Classroomaccess;
import global.dao.Databaseconnection;
import global.dao.Sublaboratoryaccess;
import global.model.Classroom;
import global.model.Sublaboratory;
import global.model.View_classroom;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

import czy.dao.Courselaboratoryaccess;
import czy.model.Courselaboratory;
import czy.model.Tools;
import czy.model.View_courselaboratory;

/**
 * 
 * @author __USER__
 */
public class CZY__jd_updatecourselaboratory extends javax.swing.JDialog {
	private int ce_id;

	/** Creates new form CZY__jd_updatecourselaboratory */
	public CZY__jd_updatecourselaboratory(java.awt.Frame parent, boolean modal) {
		super(parent, modal);
		initComponents();
	}

	public CZY__jd_updatecourselaboratory(java.awt.Frame parent, boolean modal,
			int ce_id) {
		super(parent, modal);
		initComponents();
		this.ce_id = ce_id;
		// 设置界面居中显示
		this.setLocationRelativeTo(null);
		fillcomboxclassroom();
		Filltablecourselaboratory();
		// 设置jtable表格行单选
		jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		// 隐藏编号列
		Tools.hideColumn(jTable1, 0);
		// 隐藏实验室编号列
		Tools.hideColumn(jTable1, 1);
		// 隐藏实验分室编号列
		Tools.hideColumn(jTable1, 3);
	}

	private void Filltablecourselaboratory() {
		// 取得表格的model信息
		DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
		// 清空表格中显示的数据
		dtm.setRowCount(0);

		ArrayList<View_courselaboratory> cllist = Courselaboratoryaccess
				.getcourselaboratorybyceid(ce_id);
		for (int i = 0; i < cllist.size(); i++) {
			// 取出对应字段信息
			String cl_id = cllist.get(i).getCl_id();
			// int ce_id=cllist.get(i).getCe_id() ;
			String sl_id = cllist.get(i).getSl_id();
			String sl_name = cllist.get(i).getSl_name();
			int sumsl_seating = cllist.get(i).getSumsl_seating();
			String sl_seating = cllist.get(i).getSl_seating();
			int cr_id = cllist.get(i).getCr_id();
			String d_id = cllist.get(i).getD_id();
			String cr_name = cllist.get(i).getCr_name();
			int ct_id = cllist.get(i).getCt_id();
			int cr_seating = cllist.get(i).getCr_seating();
			int b_id = cllist.get(i).getB_id();

			// 生成向量类型变量
			Vector v = new Vector();
			// 将取得数据添加到向量中
			v.add(cl_id);
			v.add(cr_id);
			v.add(cr_name);
			v.add(sl_id);
			v.add(sl_name);
			// 如果实验分室座位数大于0,则可容纳人数添加为实验分室座位数
			if (sumsl_seating > 0)
				v.add(sumsl_seating);
			else
				// 否则可容纳人数添加为实验室座位数
				v.add(cr_seating);
			// 将向量添加到表格中
			dtm.addRow(v);
		}
	}

	private void fillcomboxclassroom() {
		// 清空授课教室下拉列表
		jComboBox1.removeAllItems();
		String condition = "ct_id>=3";
		ArrayList<View_classroom> aList = Classroomaccess
				.getView_classroom(condition);
		ArrayList<Classroom> crlist = new ArrayList<Classroom>();
		for (int i = 0; i < aList.size(); i++) {
			int cr_id = aList.get(i).getCr_id();
			String d_id = aList.get(i).getD_id();
			String cr_name = aList.get(i).getCr_name();
			int ct_id = aList.get(i).getCt_id();
			int cr_seating = aList.get(i).getSeating();
			int b_id = aList.get(i).getB_id();
			crlist.add(new Classroom(cr_id, d_id, cr_name, ct_id, cr_seating,
					b_id));
		}
		if (crlist == null)
			return;
		for (int i = 0; i < crlist.size(); i++) {
			jComboBox1.addItem(crlist.get(i));
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

jLabel1 = new javax.swing.JLabel();
jComboBox1 = new javax.swing.JComboBox();
jLabel2 = new javax.swing.JLabel();
jScrollPane1 = new javax.swing.JScrollPane();
jList1 = new javax.swing.JList();
jButton1 = new javax.swing.JButton();
jButton2 = new javax.swing.JButton();
jScrollPane3 = new javax.swing.JScrollPane();
jTable1 = new javax.swing.JTable();
jButton3 = new javax.swing.JButton();
jButton4 = new javax.swing.JButton();

setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
setTitle("\u8bfe\u7a0b\u5b9e\u9a8c\u5ba4\u5206\u914d");

jLabel1.setText("\u8bf7\u9009\u62e9\u5b9e\u9a8c\u5ba4\uff1a");

jComboBox1.addItemListener(new java.awt.event.ItemListener() {
public void itemStateChanged(java.awt.event.ItemEvent evt) {
jComboBox1ItemStateChanged(evt);
}
});

jLabel2.setText("\u8bf7\u9009\u62e9\u5b9e\u9a8c\u5206\u5ba4\uff1a");

jScrollPane1.setViewportView(jList1);

jButton1.setText("\u6dfb\u52a0");
jButton1.addActionListener(new java.awt.event.ActionListener() {
public void actionPerformed(java.awt.event.ActionEvent evt) {
jButton1ActionPerformed(evt);
}
});

jButton2.setText("\u4fee\u6539");
jButton2.addActionListener(new java.awt.event.ActionListener() {
public void actionPerformed(java.awt.event.ActionEvent evt) {
jButton2ActionPerformed(evt);
}
});

jTable1.setModel(new javax.swing.table.DefaultTableModel(
	new Object [][] {
		
	},
	new String [] {
		"编号", "实验室编号", "实验室名称", "实验分室编号", "实验分室名称", "可容纳人数"
	}
));
jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
public void mouseClicked(java.awt.event.MouseEvent evt) {
jTable1MouseClicked(evt);
}
});
jScrollPane3.setViewportView(jTable1);

jButton3.setText("\u5220\u9664");
jButton3.addActionListener(new java.awt.event.ActionListener() {
public void actionPerformed(java.awt.event.ActionEvent evt) {
jButton3ActionPerformed(evt);
}
});

jButton4.setText("\u9000\u51fa");
jButton4.addActionListener(new java.awt.event.ActionListener() {
public void actionPerformed(java.awt.event.ActionEvent evt) {
jButton4ActionPerformed(evt);
}
});

javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
getContentPane().setLayout(layout);
layout.setHorizontalGroup(
layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
.addGroup(layout.createSequentialGroup()
.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
.addContainerGap()
.addComponent(jLabel1)
.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
.addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
.addComponent(jLabel2)
.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
.addGroup(layout.createSequentialGroup()
.addContainerGap()
.addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 572, Short.MAX_VALUE))
.addGroup(layout.createSequentialGroup()
.addGap(104, 104, 104)
.addComponent(jButton1)
.addGap(53, 53, 53)
.addComponent(jButton2)
.addGap(59, 59, 59)
.addComponent(jButton3)
.addGap(47, 47, 47)
.addComponent(jButton4)))
.addContainerGap())
);
layout.setVerticalGroup(
layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
.addGroup(layout.createSequentialGroup()
.addContainerGap()
.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
.addComponent(jLabel2)
.addComponent(jLabel1)
.addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
.addGap(31, 31, 31)))
.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
.addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
.addComponent(jButton1)
.addComponent(jButton2)
.addComponent(jButton3)
.addComponent(jButton4))
.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
);

pack();
}// </editor-fold>

	// GEN-END:initComponents
	private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {
		// 获得表格中选中的行
		int row = jTable1.getSelectedRow();
		// 如果未选中，则提示信息后退出代码执行
		if (row < 0) {
			JOptionPane.showMessageDialog(this, "请选择要修改的行");
			return;
		}
		if (JOptionPane.showConfirmDialog(this, "确定要删除本条记录么？", "提示信息",
				JOptionPane.YES_NO_OPTION) == 1)
			return;
		// 从表格中获得课程实验室编号并分解
		String[] cl_idString = ((String) jTable1.getValueAt(row, 0)).split(",");
		// 将课程实验室编号字符数组转换为整形数组
		int[] cl_id = new int[cl_idString.length];
		for (int i = 0; i < cl_idString.length; i++) {
			cl_id[i] = Integer.parseInt(cl_idString[i]);
		}
		Connection con = null;
		try {
			con = Databaseconnection.getconnection();
			con.setAutoCommit(false);
			// 删除课程实验室的语句
			for (int i = 0; i < cl_id.length; i++) {
				int r = Courselaboratoryaccess.delete(con, cl_id[i]);
				if (r < 1) {
					Tools.connectionroolback(con, "课程实验室分配修改失败，请联系系统管理员！");
					return;
				}
			}
			con.commit();
			Filltablecourselaboratory();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (!con.isClosed())
					con.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}

	/**
	 * 根据给定的实验分室数组设置列表内的选择的值
	 * 
	 * @author czy
	 * @param sl
	 *            :实验分室数组
	 */
	private void SetListMultinomialSelected(Sublaboratory[] sl) {
		DefaultListModel dlm = (DefaultListModel) jList1.getModel();
		int[] indices = new int[sl.length];
		int in = 0;
		for (int j = 0; j < sl.length; j++) {
			for (int i = 0; i < dlm.getSize(); i++) {
				if (((Sublaboratory) dlm.getElementAt(i)).equals(sl[j])) {
					indices[in++] = i;
				}
			}
		}
		jList1.setSelectedIndices(indices);
	}

	private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {
		int row = jTable1.getSelectedRow();
		int cr_id = (Integer) jTable1.getValueAt(row, 1);
		Classroom cr = new Classroom(cr_id, "", "", 0, 0, 0);
		jComboBox1.setSelectedItem(cr);
		String sl_idString = (String) jTable1.getValueAt(row, 3);
		if (sl_idString == null)
			return;
		String[] sl_id = sl_idString.split(",");
		Sublaboratory[] sl = new Sublaboratory[sl_id.length];
		for (int i = 0; i < sl_id.length; i++) {
			sl[i] = new Sublaboratory(Integer.parseInt(sl_id[i]), 0, "", 0);
		}
		SetListMultinomialSelected(sl);
	}

	/**
	 * 挑选出修改的实验分室编号
	 * 
	 * @author czy
	 * @param sl_new
	 *            ：修改后实验分室编号数组
	 * @param sl_old
	 *            ：修改前实验分室编号数组
	 * @return 挑选出的修改的实验分室编号列表
	 */
	private ArrayList<Integer> NewlyAdded(int[] sl_new, int[] sl_old) {
		ArrayList<Integer> list = new ArrayList<Integer>();
		for (int i = 0; i < sl_new.length; i++) {
			int j;
			for (j = 0; j < sl_old.length; j++) {
				if (sl_new[i] == sl_old[j])
					break;
			}
			if (j >= sl_old.length)
				list.add(sl_new[i]);
		}
		return list;
	}

	/**
	 * 挑选出修改后删除的课程实验室编号
	 * 
	 * @author czy
	 * @param sl_new
	 *            ：修改后实验分室编号数组
	 * @param sl_old
	 *            ：修改前实验分室编号数组
	 * @param cl_id
	 *            ：课程实验室编号数组
	 * @return 挑选出修改后删除的课程实验室编号列表
	 */
	private ArrayList<Integer> Delete(int[] sl_new, int[] sl_old, int cl_id[]) {
		ArrayList<Integer> list = new ArrayList<Integer>();
		for (int i = 0; i < sl_old.length; i++) {
			int j;
			for (j = 0; j < sl_new.length; j++) {
				if (sl_old[i] == sl_new[j])
					break;
			}
			if (j >= sl_new.length)
				list.add(cl_id[i]);
		}
		return list;
	}

	private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
		// 获得表格中选中的行
		int row = jTable1.getSelectedRow();
		// 如果未选中，则提示信息后退出代码执行
		if (row < 0) {
			JOptionPane.showMessageDialog(this, "请选择要修改的行");
			return;
		}
		// 从表格中获得原实验室编号
		int cr_id_old = (Integer) jTable1.getValueAt(row, 1);
		// 从下拉列表框中获得现实验室编号
		int cr_id_new = ((Classroom) jComboBox1.getSelectedItem()).getCr_id();
		// 如果原编号与现编号不相等，则提示信息后退出代码执行
		if (cr_id_old != cr_id_new) {
			JOptionPane.showMessageDialog(this,
					"修改数据时，只能修改实验分室数据，如果想要修改实验室数据，请先删除该实验室数据后再添加！");
			return;
		}
		DefaultListModel dlm = (DefaultListModel) jList1.getModel();
		Object[] sl_new = {};
		if (dlm.getSize() > 0) {
			sl_new = jList1.getSelectedValues();
			if (sl_new.length == 0) {
				JOptionPane.showMessageDialog(this, "请选择实验分室");
				return;
			}
		}
		// 获取新选择的实验分室编号到整形数组sl_id_new中
		int[] sl_id_new = new int[sl_new.length];
		for (int i = 0; i < sl_new.length; i++) {
			sl_id_new[i] = ((Sublaboratory) sl_new[i]).getSl_id();
		}
		// 获取原先的实验分室编号到整形数组sl_id_old中
		String sl_id = (String) jTable1.getValueAt(row, 3);
		String[] sl_id_array = sl_id.split(",");
		int[] sl_id_old = new int[sl_id_array.length];
		for (int i = 0; i < sl_id_array.length; i++) {
			sl_id_old[i] = Integer.parseInt(sl_id_array[i]);
		}
		// 从表格中获得课程实验室编号并分解
		String[] cl_idString = ((String) jTable1.getValueAt(row, 0)).split(",");
		// 将课程实验室编号字符数组转换为整形数组
		int[] cl_id = new int[cl_idString.length];
		for (int i = 0; i < cl_idString.length; i++) {
			cl_id[i] = Integer.parseInt(cl_idString[i]);
		}
		// 获取新增的实验分室编号列表
		ArrayList<Integer> nList = NewlyAdded(sl_id_new, sl_id_old);
		// 获取删除的课程实验室编号列表
		ArrayList<Integer> dList = Delete(sl_id_new, sl_id_old, cl_id);
		Connection con = null;
		try {
			con = Databaseconnection.getconnection();
			con.setAutoCommit(false);
			for (int i = 0; i < nList.size(); i++) {
				Courselaboratory cl = new Courselaboratory(0, ce_id, cr_id_old,
						nList.get(i));
				int r = Courselaboratoryaccess.insert(con, cl);
				if (r < 1 && r != -1606) {
					Tools.connectionroolback(con, "课程实验室分配修改失败，请联系系统管理员！");
					return;
				}
			}
			// 增加删除实验室的语句
			for (int i = 0; i < dList.size(); i++) {
				int r = Courselaboratoryaccess.delete(con, dList.get(i));
				if (r < 1) {
					Tools.connectionroolback(con, "课程实验室分配修改失败，请联系系统管理员！");
					return;
				}
			}
			con.commit();
			Filltablecourselaboratory();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (!con.isClosed())
					con.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}

	}

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
		// 获取到选择的实验室信息
		Classroom cr = (Classroom) jComboBox1.getSelectedItem();
		// 如果为空，则提示信息并退出。
		if (cr == null) {
			JOptionPane.showMessageDialog(this, "未选择实验室信息，不能完成添加工作！");
			return;
		}
		// 得到实验室编号
		int cr_id = cr.getCr_id();
		Object[] sl = {};
		DefaultListModel dlm = (DefaultListModel) jList1.getModel();
		if (dlm.getSize() > 0) {
			sl = jList1.getSelectedValues();
			if (sl.length == 0) {
				JOptionPane.showMessageDialog(this, "请选择实验分室");
				return;
			}
		}
		Connection con = null;
		try {
			con = Databaseconnection.getconnection();
			con.setAutoCommit(false);
			if (sl.length > 0) {
				for (int i = 0; i < sl.length; i++) {
					int sl_id = ((Sublaboratory) sl[i]).getSl_id();
					Courselaboratory cl = new Courselaboratory(-1, ce_id,
							cr_id, sl_id);
					int r = Courselaboratoryaccess.insert(con, cl);
					if (r < 1 && r != -1606) {
						Tools.connectionroolback(con, "课程实验室分配失败，请联系系统管理员！");
						return;
					}
				}
			} else {
				Courselaboratory cl = new Courselaboratory(-1, ce_id, cr_id, -1);
				int r = Courselaboratoryaccess.insert(con, cl);
				if (r < 1 && r != -1606) {
					Tools.connectionroolback(con, "课程实验室分配失败，请联系系统管理员！");
					return;
				}
			}
			con.commit();
			Filltablecourselaboratory();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (!con.isClosed()) {
					con.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}

	private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {
		this.dispose();
	}

	private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {
		if (jComboBox1.getSelectedItem() == null) {
			jList1.setEnabled(false);
			DefaultListModel dlm = new DefaultListModel();
			jList1.setModel(dlm);
			return;
		}
		int cr_id = ((Classroom) jComboBox1.getSelectedItem()).getCr_id();
		String condition = "cr_id=" + cr_id;
		ArrayList<Sublaboratory> aList = Sublaboratoryaccess
				.getSublaboratory(condition);
		DefaultListModel dlm = new DefaultListModel();
		jList1.setModel(dlm);
		if (aList.size() == 0)
			return;
		for (int i = 0; i < aList.size(); i++) {
			dlm.addElement(aList.get(i));
		}
		if (dlm.getSize() > 0)
			jList1.setEnabled(true);
		else
			jList1.setEnabled(false);

	}

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				CZY__jd_updatecourselaboratory dialog = new CZY__jd_updatecourselaboratory(
						new javax.swing.JFrame(), true);
				dialog.addWindowListener(new java.awt.event.WindowAdapter() {
					public void windowClosing(java.awt.event.WindowEvent e) {
						System.exit(0);
					}
				});
				dialog.setVisible(true);
			}
		});
	}

	// GEN-BEGIN:variables
	// Variables declaration - do not modify
	private javax.swing.JButton jButton1;
	private javax.swing.JButton jButton2;
	private javax.swing.JButton jButton3;
	private javax.swing.JButton jButton4;
	private javax.swing.JComboBox jComboBox1;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JList jList1;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane3;
	private javax.swing.JTable jTable1;
	// End of variables declaration//GEN-END:variables

}