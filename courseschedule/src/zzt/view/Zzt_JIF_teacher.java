/*
 * Zzt_JIF_teacher.java
 *
 * Created on __DATE__, __TIME__
 */

package zzt.view;

import java.io.File;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

import czy.model.Tools;
import ggc.dao.GGC_TeacherAddTable;
import ggc.view.throw_teacher;
import global.dao.Databaseconnection;
import global.dao.ExcelFileFilter;
import global.dao.Fileselection;
import global.dao.Teacheraccess;
import global.dao.Viewteacheraccess;
import global.model.Department;
import global.model.Fillcombobox;
import global.model.Office;
import global.model.Teacher;
import global.model.View_teacher;
import zxx.dao.PrintObjectExcel;

/**
 *教师管理界面
 *		  vt：
 *			View_teacher对象
 * @author  zzt
 */
public class Zzt_JIF_teacher extends javax.swing.JInternalFrame {
	private View_teacher vt;
	private String t_id = "";
	private String d_id;
	private String o_id;
	private String zzt_password;

	/** Creates new form Zzt_JIF_teacher */
	public Zzt_JIF_teacher() {
		//初始化界面
		initComponents();
	}

	public Zzt_JIF_teacher(View_teacher vt) {
		//初始化界面
		initComponents();
		//将传递的参数（登录用户的视图信息）传递给类的对应属性字段
		this.vt = vt;
		//调用函数设置表格的宽高
		setColumnWidth();
		// 调用类的静态函数初始化部门下拉列表
		Fillcombobox.filldepartmentadd(d_id, jComboBox1);
		// 调用类的静态函数初始化科室下拉列表
		Fillcombobox.filloffice(o_id, jComboBox2);
		fillteacher();
	}

	/**
	 * 构造界面
	 * 
	 * @author zzt
	 * @param vt
	 *            ：登录用户的视图信息
	 */
	public void fillteacher() {
		//声明DefaultTableModel 得到jtble1表格上的模型
		DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
		//设置表格的行数从0开始计数
		dtm.setRowCount(0);
		//得到科室下拉列表内容
		Department d = (Department) jComboBox1.getSelectedItem();
		// 如果为空,则退出
		if (d == null)
			return;
		//得到科室下拉列表内容
		Office o = (Office) jComboBox2.getSelectedItem();
		// 如果为空,则退出
		if (o == null)
			return;
		/**
		 * 构造界面
		 * 
		 * @author zzt
		 * @param vt
		 *            ：登录用户的视图信息
		 */
		ArrayList<View_teacher> alist = Teacheraccess.getview_teacher(o
				.getO_id());
		if (alist.size() == 0)
			return;
		// 取出对应字段信息
		for (int i = 0; i < alist.size(); i++) {
			String d_id = alist.get(i).getD_id();
			String d_name = alist.get(i).getD_name();
			String o_id = alist.get(i).getO_id();
			String o_name = alist.get(i).getO_name();
			t_id = alist.get(i).getT_id();
			String t_name = alist.get(i).getT_name();
			String t_password = alist.get(i).getT_password();
			String t_power = alist.get(i).getT_power();
			String t_tel = alist.get(i).getT_tel();
			Vector v = new Vector();
			v.add(d_name);
			v.add(o_name);
			v.add(t_id);
			v.add(t_name);
			v.add(t_power);
			v.add(t_tel);
			dtm.addRow(v);
			System.out.println(v);
		}

	}

	/**
	 * 设置表格的宽高
	 * 
	 * @author zzt
	 */
	private void setColumnWidth() {
		TableColumn Column;
		// 设置教学任务表格各列宽度
		Column = jTable1.getColumnModel().getColumn(0);
		Column.setPreferredWidth(100);
		Column = jTable1.getColumnModel().getColumn(1);
		Column.setPreferredWidth(100);
		Column = jTable1.getColumnModel().getColumn(2);
		Column.setPreferredWidth(50);
		Column = jTable1.getColumnModel().getColumn(3);
		Column.setPreferredWidth(50);
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	//GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

jPanel1 = new javax.swing.JPanel();
jLabel1 = new javax.swing.JLabel();
jLabel2 = new javax.swing.JLabel();
jComboBox1 = new javax.swing.JComboBox();
jComboBox2 = new javax.swing.JComboBox();
jLabel3 = new javax.swing.JLabel();
jTextField3 = new javax.swing.JTextField();
jTextField2 = new javax.swing.JTextField();
jLabel4 = new javax.swing.JLabel();
jLabel5 = new javax.swing.JLabel();
jLabel6 = new javax.swing.JLabel();
jTextField4 = new javax.swing.JTextField();
jTextField1 = new javax.swing.JTextField();
jScrollPane1 = new javax.swing.JScrollPane();
jTable1 = new javax.swing.JTable();
jButton1 = new javax.swing.JButton();
jButton2 = new javax.swing.JButton();
jButton3 = new javax.swing.JButton();
jButton4 = new javax.swing.JButton();
jButton5 = new javax.swing.JButton();
jButton6 = new javax.swing.JButton();
jButton7 = new javax.swing.JButton();
jButton8 = new javax.swing.JButton();

setClosable(true);
setIconifiable(true);
setMaximizable(true);
setTitle("\u6559\u5e08\u4fe1\u606f\u7ba1\u7406");

jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "\u6559\u5e08\u7ba1\u7406"));

jLabel1.setText("\u90e8\u95e8\u540d\u79f0\uff1a");

jLabel2.setText("\u79d1\u5ba4\u540d\u79f0\uff1a");


jComboBox1.addItemListener(new java.awt.event.ItemListener() {
public void itemStateChanged(java.awt.event.ItemEvent evt) {
jComboBox1ItemStateChanged(evt);
}
});


jComboBox2.addItemListener(new java.awt.event.ItemListener() {
public void itemStateChanged(java.awt.event.ItemEvent evt) {
jComboBox2ItemStateChanged(evt);
}
});


jLabel3.setText("\u6559\u5e08\u7f16\u53f7\uff1a");

jLabel4.setText("\u6559\u5e08\u6743\u9650\uff1a");

jLabel5.setText("\u8054\u7cfb\u7535\u8bdd\uff1a");

jLabel6.setText("\u6559\u5e08\u540d\u79f0\uff1a");

jTextField1.setEditable(false);

javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
jPanel1.setLayout(jPanel1Layout);
jPanel1Layout.setHorizontalGroup(
jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
.addGap(30, 30, 30)
.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
.addGroup(jPanel1Layout.createSequentialGroup()
.addComponent(jLabel6)
.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
.addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE))
.addGroup(jPanel1Layout.createSequentialGroup()
.addComponent(jLabel1)
.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
.addComponent(jComboBox1, 0, 172, Short.MAX_VALUE)))
.addGap(26, 26, 26)
.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
.addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
.addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
.addComponent(jTextField3)
.addComponent(jComboBox2, 0, 148, Short.MAX_VALUE))
.addGap(18, 18, 18)
.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
.addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
.addGap(13, 13, 13)
.addComponent(jLabel3)
.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
.addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE))
.addGroup(jPanel1Layout.createSequentialGroup()
.addComponent(jLabel5)
.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
.addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)))
.addGap(89, 89, 89))
);
jPanel1Layout.setVerticalGroup(
jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
.addGroup(jPanel1Layout.createSequentialGroup()
.addGap(22, 22, 22)
.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
.addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
.addComponent(jLabel1)
.addComponent(jLabel2)
.addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
.addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
.addComponent(jLabel3))
.addGap(29, 29, 29)
.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
.addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
.addComponent(jLabel6)
.addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
.addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
.addComponent(jLabel4)
.addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
.addContainerGap(45, Short.MAX_VALUE))
);

jTable1.setModel(new javax.swing.table.DefaultTableModel(
	new Object [][] {
		
	},
	new String [] {
		"部门名称", "科室名称", "教师编号", "教师名称", "教师权限", "联系方式"
	}
) {
	boolean[] canEdit = new boolean [] {
		false, false, false, false, false, false
	};

	public boolean isCellEditable(int rowIndex, int columnIndex) {
		return canEdit [columnIndex];
	}
});
jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
public void mouseClicked(java.awt.event.MouseEvent evt) {
jTable1MouseClicked(evt);
}
});
jScrollPane1.setViewportView(jTable1);

jButton1.setText("\u6dfb\u52a0");
jButton1.addActionListener(new java.awt.event.ActionListener() {
public void actionPerformed(java.awt.event.ActionEvent evt) {
jButton1ActionPerformed(evt);
}
});

jButton2.setText("\u4fee\u6539");
jButton2.addActionListener(new java.awt.event.ActionListener() {
public void actionPerformed(java.awt.event.ActionEvent evt) {
jButton2ActionPerformed(evt);
}
});

jButton3.setText("\u5220\u9664");
jButton3.addActionListener(new java.awt.event.ActionListener() {
public void actionPerformed(java.awt.event.ActionEvent evt) {
jButton3ActionPerformed(evt);
}
});

jButton4.setText("\u9000\u51fa");
jButton4.addActionListener(new java.awt.event.ActionListener() {
public void actionPerformed(java.awt.event.ActionEvent evt) {
jButton4ActionPerformed(evt);
}
});

jButton5.setText("\u67e5\u8be2");

jButton6.setText("\u5bfc\u5165");
jButton6.addActionListener(new java.awt.event.ActionListener() {
public void actionPerformed(java.awt.event.ActionEvent evt) {
jButton6ActionPerformed(evt);
}
});

jButton7.setText("\u6570\u636e\u5bfc\u51fa");
jButton7.addActionListener(new java.awt.event.ActionListener() {
public void actionPerformed(java.awt.event.ActionEvent evt) {
jButton7ActionPerformed(evt);
}
});

jButton8.setText("\u5bfc\u5165\u683c\u5f0f\u5bfc\u51fa");
jButton8.addActionListener(new java.awt.event.ActionListener() {
public void actionPerformed(java.awt.event.ActionEvent evt) {
jButton8ActionPerformed(evt);
}
});

javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
getContentPane().setLayout(layout);
layout.setHorizontalGroup(
layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
.addGroup(layout.createSequentialGroup()
.addContainerGap()
.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
.addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
.addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 882, Short.MAX_VALUE)
.addGroup(layout.createSequentialGroup()
.addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
.addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
.addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
.addGap(18, 18, 18)
.addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
.addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
.addGap(68, 68, 68)
.addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
.addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
.addComponent(jButton8)))
.addContainerGap())
);
layout.setVerticalGroup(
layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
.addGroup(layout.createSequentialGroup()
.addContainerGap()
.addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
.addGroup(layout.createSequentialGroup()
.addGap(29, 29, 29)
.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
.addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
.addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
.addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
.addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
.addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
.addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
.addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
.addGroup(layout.createSequentialGroup()
.addGap(30, 30, 30)
.addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
.addContainerGap(53, Short.MAX_VALUE))
);

pack();
}// </editor-fold>

	//GEN-END:initComponents
	private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		//调用导出方法把文件的路径存放在tabletwo变量里
				File Filename = Fileselection.exportselect();
				File filenametow = new File(Filename + ".xls");
				String filetable = filenametow.toString();
				//		 System.out.println(Filename+".xls");
				String t_id = null;
				//实例化部门列表，把部门信息存放在calist变量中
				ArrayList<View_teacher> caList = Viewteacheraccess.getTeacher(t_id);
				List<Teacher> list = new ArrayList<Teacher>();
				//设置excel表头信息
				String[] header = { "科室编号", "部门编号", "科室名称" };
				//		 File Filename =new File() ;
				//		 System.out.println(Filename);
				//		
				JFileChooser fDialog = new JFileChooser();
				if (Filename == null) {
					//			 System.out.println("文件名为null");
					return;
				}
				//怎么拿到导出之后的文件名
				if (filenametow.exists()) {
					System.out.println(filenametow.exists());
					int overwriteSelect = JOptionPane.showConfirmDialog(this,
							"<html><font size=3>文件" + filenametow.getName()
									+ "已存在，是否覆盖?</font><html>", "是否覆盖?",
							JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
					System.out.println(overwriteSelect);
					if (overwriteSelect == JOptionPane.YES_OPTION) {

						List<String> aList = PrintObjectExcel.printExcel(caList,
								filetable, header);
						if (aList.size() == 0) {
							JOptionPane.showMessageDialog(this, "导出成功", "提示信息",
									JOptionPane.INFORMATION_MESSAGE);
						} else {
							String str = "";
							for (String item : aList) {
								str += item + "\n";
							}
							JOptionPane.showMessageDialog(this, str, "错误信息",
									JOptionPane.ERROR_MESSAGE);
						}
					} else {
						return;
					}
				}
				List<String> aList = PrintObjectExcel.printExcel(caList, filetable,
						header);
				if (aList.size() == 0) {
					JOptionPane.showMessageDialog(this, "导出成功", "提示信息",
							JOptionPane.INFORMATION_MESSAGE);
				} else {
					String str = "";
					for (String item : aList) {
						str += item + "\n";
					}
					JOptionPane.showMessageDialog(this, str, "错误信息",
							JOptionPane.ERROR_MESSAGE);
				}
	}

	private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		//调用导出方法把文件的路径存放在tabletwo变量里
		File Filename = Fileselection.exportselect();
		File filenametow = new File(Filename + ".xls");
		String filetable = filenametow.toString();
		//		 System.out.println(Filename+".xls");
		String t_id = null;
		//实例化部门列表，把部门信息存放在calist变量中
		ArrayList<View_teacher> caList = Viewteacheraccess.getTeacher(t_id);
		List<View_teacher> list = new ArrayList<View_teacher>();
		//设置excel表头信息
		String[] header = { "部门编号", "部门名称", "科室编号", "科室名称", "教师编号", "教师名称",
				"教师密码", "教师权限", "联系电话" };
		//		 File Filename =new File() ;
		//		 System.out.println(Filename);
		//		
		JFileChooser fDialog = new JFileChooser();
		if (Filename == null) {
			//			 System.out.println("文件名为null");
			return;
		}
		//怎么拿到导出之后的文件名
		if (filenametow.exists()) {
			System.out.println(filenametow.exists());
			int overwriteSelect = JOptionPane.showConfirmDialog(this,
					"<html><font size=3>文件" + filenametow.getName()
							+ "已存在，是否覆盖?</font><html>", "是否覆盖?",
					JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
			System.out.println(overwriteSelect);
			if (overwriteSelect == JOptionPane.YES_OPTION) {

				List<String> aList = PrintObjectExcel.printExcel(caList,
						filetable, header);
				if (aList.size() == 0) {
					JOptionPane.showMessageDialog(this, "导出成功", "提示信息",
							JOptionPane.INFORMATION_MESSAGE);
				} else {
					String str = "";
					for (String item : aList) {
						str += item + "\n";
					}
					JOptionPane.showMessageDialog(this, str, "错误信息",
							JOptionPane.ERROR_MESSAGE);
				}
			} else {
				return;
			}
		}
		List<String> aList = PrintObjectExcel.printExcel(caList, filetable,
				header);
		if (aList.size() == 0) {
			JOptionPane.showMessageDialog(this, "导出成功", "提示信息",
					JOptionPane.INFORMATION_MESSAGE);
		} else {
			String str = "";
			for (String item : aList) {
				str += item + "\n";
			}
			JOptionPane.showMessageDialog(this, str, "错误信息",
					JOptionPane.ERROR_MESSAGE);
		}
	}

	private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		JFileChooser fDialog = new JFileChooser();
		// 初始化ExcelFileFilter文件类型过滤类
		ExcelFileFilter excelFilter = new ExcelFileFilter();
		// 设置文本框类型
		fDialog.addChoosableFileFilter(excelFilter);
		// 设置文件选择框的标题
		fDialog.setFileFilter(excelFilter);
		// 浏览文件
		fDialog.setDialogTitle("请选择文件");
		// 弹出选择框
		int returnVal = fDialog.showOpenDialog(null);
		// 定义table变量用来存储要浏览文件的路径
		String table = fDialog.getSelectedFile().toString();
		//		System.out.println(table);
		// 初始化office_List数组,把判定的错误信息放在office_List数组列表里
		List<String> teacher_List = GGC_TeacherAddTable.getteacherThrow(table);
		//		System.out.println(department_List);
		// 判断office_List的错误信息个数,如果为空则导入成功,刷新页面
		if (teacher_List.size() == 0 || teacher_List == null) {
			JOptionPane.showMessageDialog(this, "导入成功", "提示信息",
					JOptionPane.INFORMATION_MESSAGE);
			fillteacher();
		} else {
			// 首先定义一个字符串变量为str
			String str = "";
			// 遍历数组列表错误信息
			for (String item : teacher_List) {
				// 把遍历过的错误信息,存放到str变量当中
				str += item + "\n";
			}
			// 提示信息：把错误信息输出到前台页面当中！
			 throw_teacher th = new throw_teacher(null, true);
			 th.infomation(str);
			 th.setVisible(true);
		}

	}

	/**
	 * 修改教师管理信息
	 * 
	 * @author zzt
	 */
	private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		// 记录表格当前的行
		int i = jTable1.getSelectedRow();
		// 如果i==-1，说明没有选中行
		if (i == -1) {
			// 提示信息：请选中要修改的记录
			JOptionPane.showMessageDialog(this, "请选中要修改的记录", "提示信息",
					JOptionPane.INFORMATION_MESSAGE);
			return;
		}
		// 如果教师名称文本框中没有输入内容
		if (jTextField2.getText().equals("")) {
			// 提示信息:请输入部门名称
			JOptionPane.showMessageDialog(this, "请输入教师名称！", "提示信息",
					JOptionPane.INFORMATION_MESSAGE);
			jTextField2.requestFocus();
			return;
		}
		// 如果教师权限文本框中没有输入内容
		if (jTextField3.getText().equals("")) {
			// 提示信息:请输入部门名称
			JOptionPane.showMessageDialog(this, "请输入教师权限！", "提示信息",
					JOptionPane.INFORMATION_MESSAGE);
			jTextField2.requestFocus();
			return;
		}
		// 如果教师联系方式文本框中没有输入内容
		if (jTextField3.getText().equals("")) {
			// 提示信息:请输入部门名称
			JOptionPane.showMessageDialog(this, "请输入教师联系方式！", "提示信息",
					JOptionPane.INFORMATION_MESSAGE);
			jTextField2.requestFocus();
			return;
		}
		// 定义一个变量来存放表格的第i行第0列的字符串
		Office jcbox2 = (Office) jComboBox2.getSelectedItem();
		Department jcbox1 = (Department) jComboBox1.getSelectedItem();
		String zzt_oid = jcbox2.getO_id();
		String zzt_did = jcbox1.getD_id();
		String t_id = (String) jTable1.getValueAt(i, 2);
		String t_name = (String) jTable1.getValueAt(i, 3);
		String t_power = (String) jTable1.getValueAt(i, 4);
		String t_tel = (String) jTable1.getValueAt(i, 5);
		String t_id_zzt = jTextField1.getText();
		String t_name_zzt = jTextField2.getText();
		String t_power_zzt = jTextField3.getText();
		String t_tel_zzt = jTextField4.getText();
		// 声明数据库为空
		Connection con = null;
		try {
			// 创建数据库连接
			con = Databaseconnection.getconnection();
			//设置数据库的自动提交方式为false
			con.setAutoCommit(false);
			if (!(t_name_zzt.equals(t_name))) {
				if (Teacheraccess.findname(con, t_name_zzt)) {
					// 提示信息：教师名称已经存在
					JOptionPane.showMessageDialog(this, "教师名称已经存在请重新输入",
							"错误信息", JOptionPane.ERROR_MESSAGE);
					// 教师编号文本框获得焦点
					jTextField2.requestFocus();
					// 教师名称文本框全选
					jTextField2.selectAll();
					return;
				}
			}
			// 判定当前的输入的教师编号和教师名称与数据库里面的是否重复,如果重复则提示信息
			if ((t_id_zzt.equals(t_id)) && (t_name_zzt.equals(t_name))
					&& (t_power_zzt.equals(t_power))
					&& (t_tel_zzt.equals(t_tel))) {
				// 提示信息:请输入您要修改的信息！
				JOptionPane.showMessageDialog(this, "请输入您要修改的信息！", "提示信息",
						JOptionPane.INFORMATION_MESSAGE);
				return;
			}
			// 定义一个变量r用来存储update方法返回的结果集
			int r = Teacheraccess.update(con, t_id, new Teacher(t_id_zzt,
					jTextField2.getText(), zzt_password, jTextField3.getText(),
					zzt_oid, jTextField4.getText()));
			// 如果结果集大于0的话
			if (r > 0) {
				// 提示信息修改成功
				JOptionPane.showMessageDialog(this, "修改成功", "提示信息",
						JOptionPane.INFORMATION_MESSAGE);
				jTextField1.setText("");
				jTextField2.setText("");
				jTextField3.setText("");
				jTextField4.setText("");
				//开启数据库手动提交方式
				con.commit();
				// 调用departmenttable方法进行实时刷新表格
				fillteacher();
			} else {
				// 否则提示信息：修改失败请联系管理员
				JOptionPane.showMessageDialog(this, "修改失败请联系管理员", "提示信息",
						JOptionPane.ERROR_MESSAGE);
			}

		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			try {
				//如果数据库访问异常,则回滚
				con.rollback();
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			e.printStackTrace();
		}

	}

	/**
	 * 删除教师管理信息
	 * 
	 * @author zzt
	 */
	private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		// TODO add your handling code here:
		//记录表格当前的行数
		int i = jTable1.getSelectedRow();
		jTable1.setRowSelectionAllowed(true);
		String zztString = "";
		String zzt = "";
		//如果i==-1，说明没有选中行
		if (i == -1) {
			//提示信息：请选中要修改的记录
			JOptionPane.showMessageDialog(this, "请选中要删除的记录", "提示信息",
					JOptionPane.INFORMATION_MESSAGE);
			return;
		} else {
			//定义一个数组变量row存放当前选中的所有行
			int[] row = jTable1.getSelectedRows();
			//定义一个count用来存放行数
			int count = row.length;
			//遍历行数
			for (int a = 0; a < count; a++) {
				//定义一个变量来存放部门编号的第row[a]行第0列
				String t_id = (String) jTable1.getValueAt(row[a], 2);
				//定义一个空字符串变量st
				String st = ",";
				//用来存放满足删除多条语句要求的sql语句
				zzt = "(" + (zztString += "'" + t_id + "'" + (st)) + ")";
				//如果sql语句的最后一个字符是“)”则删除最后两位字符在加上一个“)”
				if (zzt.endsWith(")")) {
					zzt = zzt.substring(0, zzt.length() - 2) + ")";
				}
			}
			//提示信息,确认要删除当前记录嘛？,如果确定，则删除当前选中的记录
			int r = JOptionPane.showConfirmDialog(this, "确认要删除当前记录嘛？", "确认信息",
					JOptionPane.OK_CANCEL_OPTION);
			if (r == 0) {
				Connection con = null;
				try {
					//创建数据库连接
					con = Databaseconnection.getconnection();
					//设置数据库连接的自动提交为(false)
					con.setAutoCommit(false);
					//定义一个整型变量re来存放结果集
					int re;
					//用re来记录删除部门编号的方法的结果集
					re = Teacheraccess.Delete(con, zzt);
					//如果结果集  > 0 则删除成功
					if (re > 0) {
						JOptionPane.showMessageDialog(this, "删除记录成功！", "确认信息",
								JOptionPane.INFORMATION_MESSAGE);
						//开启数据库的手动提交
						con.commit();
						//实时刷新jtble1表格数据
						fillteacher();
						jTextField1.setText("");
						jTextField2.setText("");
						jTextField3.setText("");
						jTextField4.setText("");
					} else {
						JOptionPane.showMessageDialog(this,
								"删除失败，请联系管理员进行相关操作！", "错误信息",
								JOptionPane.ERROR_MESSAGE);
					}

				} catch (ClassNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					//捕获错误异常情况进行处理,定义一个str变量,用来存放访问sql语句错误的状态值
					String str = "23000";
					//如果当前访问的状态值等于str,则提示相应信息
					if (e.getSQLState().equals(str)) {
						JOptionPane.showMessageDialog(this,
								"由于此编号有外键约束影响,暂时不能删除！", "提示信息",
								JOptionPane.INFORMATION_MESSAGE);
					}
				}
			}
		}

	}

	/**
	 * 选择jComboBox1下拉列表,把视图信息传递给jComboBox2
	 * 
	 * @author zzt
	 */
	private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {
		// TODO add your handling code here:
		// TODO add your handling code here:
		Department dm = (Department) jComboBox1.getSelectedItem();
		if (dm == null)
			return;
		String d_id = dm.getD_id();
		Fillcombobox.filloffice(d_id, jComboBox2);
	}

	//选择科室下拉列表显示视图信息
	private void jComboBox2ItemStateChanged(java.awt.event.ItemEvent evt) {
		// TODO add your handling code here:
		fillteacher();
	}

	//退出当前界面
	private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		this.dispose();
	}

	//把单击表格里面的列传递到对应的文本框或下拉列表当中
	private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {
		// TODO add your handling code here:
		int row = jTable1.getSelectedRow();
		jTextField1.setText((String) jTable1.getValueAt(row, 2));
		jTextField2.setText((String) jTable1.getValueAt(row, 3));
		jTextField3.setText((String) jTable1.getValueAt(row, 4));
		jTextField4.setText((String) jTable1.getValueAt(row, 5));
		jComboBox2.setSelectedItem(new Office(null, null, (String) jTable1
				.getValueAt(row, 1)));
		jComboBox1.setSelectedItem(new Department(null, (String) jTable1
				.getValueAt(row, 0)));
	}

	/**
	 * 添加教师管理信息
	 * 
	 * @author zzt
	 */

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:

		String t_name = jTextField2.getText();
		String t_power = jTextField3.getText();
		String t_tel = jTextField4.getText();
		Office jcbox2 = (Office) jComboBox2.getSelectedItem();
		String zzt_oid = jcbox2.getO_id();
		// 如果教师名称文本框内容为空
		if (t_name.equals("")) {
			// 提示信息：教师名称不能为空！
			JOptionPane.showMessageDialog(this, "教师名称不能为空！");
			jTextField2.requestFocus();
			return;
		}

		if (t_power.equals("")) {
			// 提示信息：教师职称不能为空！
			JOptionPane.showMessageDialog(this, "教师职称不能为空！");
			jTextField2.requestFocus();
			return;
		}
		if (t_tel.equals("")) {
			// 提示信息：联系方式不能为空！
			JOptionPane.showMessageDialog(this, "联系方式不能为空！");
			jTextField2.requestFocus();
			return;
		}

		Connection con = null;
		String zhujian = null;
		String zhujiantwo = null;
		String d_str = "";
		String t_pass = "";
		try {
			con = Databaseconnection.getconnection();
			ResultSet max = Teacheraccess.findmax(con);
			//遍历结果集的所有数据找到最大值赋值给zhujian变量
			while (max.next()) {
				zhujian = max.getString("t_id");
				zhujiantwo = max.getString("t_password");
			}
			//如果部门编号没用数据,则添加一条编号为“01”的数据
			if (zhujian == null) {
				d_str = "090001";
			} else {
				//定义一个整形变量,从来存放当前部门编号里面的最大值加一
				int d_id_int = Integer.parseInt(zhujian) + 1;
				//在把已经加过一的整形变量转换为字符串放在d_str变量里
				d_str = "0" + Integer.toString(d_id_int);
				//实例化部门的构造方法
			}

			if (zhujiantwo == null) {
				t_pass = "123456";
			} else {
				int t_pass_int = Integer.parseInt(zhujiantwo) + 1;
				//在把已经加过一的整形变量转换为字符串放在d_str变量里
				t_pass = Integer.toString(t_pass_int);
			}
			//实例化部门的构造方法
			Teacher dt = new Teacher(d_str, t_name, t_pass, t_power, zzt_oid,
					t_tel);
			// 访问数据库查询教师姓名字段值,如果当前数据库对应的字段里面的值等于用户当前已经输入的值的情况下
			if (Teacheraccess.findname(con, t_name)) {
				// 提示信息：类型名称已经存在
				JOptionPane.showMessageDialog(this, "教师名称已经存在请重新输入", "错误信息",
						JOptionPane.ERROR_MESSAGE);
				// jTextField1文本框获得焦点
				jTextField2.requestFocus();
				// jtexfField1文本框全选
				jTextField2.selectAll();
				return;
			}
			// 定义r变量存放结果集
			int r = Teacheraccess.insert(con, dt);
			// 如果r>=1
			if (r >= 1) {
				// 则提示信息：添加成功！
				JOptionPane.showMessageDialog(this, "添加成功！");
				// 开始数据库的手动提交方式
				//						con.commit();
				fillteacher();
				jTextField1.setText("");
				jTextField2.setText("");
				jTextField3.setText("");
				jTextField4.setText("");
			}
			// 如果r<1
			if (r < 1) {
				// 则提示信息教师编号插入失败，请联系系统管理员！
				Tools.connectionroolback(con, "教师编号插入失败，请联系系统管理员！");
				return;
			}
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SQLException e) {
		} finally {
			try {
				//						con.rollback();
				if (!con.isClosed())
					con.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	//GEN-BEGIN:variables
	// Variables declaration - do not modify
	private javax.swing.JButton jButton1;
	private javax.swing.JButton jButton2;
	private javax.swing.JButton jButton3;
	private javax.swing.JButton jButton4;
	private javax.swing.JButton jButton5;
	private javax.swing.JButton jButton6;
	private javax.swing.JButton jButton7;
	private javax.swing.JButton jButton8;
	private javax.swing.JComboBox jComboBox1;
	private javax.swing.JComboBox jComboBox2;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel jLabel6;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTable jTable1;
	private javax.swing.JTextField jTextField1;
	private javax.swing.JTextField jTextField2;
	private javax.swing.JTextField jTextField3;
	private javax.swing.JTextField jTextField4;
	// End of variables declaration//GEN-END:variables

}